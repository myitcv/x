walk . |
	filter {depth 1} |
	select {mode -d}  |
	select {
		query "-
			- echo -n $file
			- ~ `{read} y yes
			"}
	} | exec 'rm $file'


equivalent to:

walk -o $>t1 .
depth -o $>t2 -d
filter -o $>t3 $t1 $t2
query -o $>t4 "...."
select -o $>t5 $t4
exec $t5 'rm $file'


when we use a quoted block, (closure really),
command responsible must do type checking
on variables that it declares.

so:

decl rexec [-o >status] {(out) <string}

says that rexec has an output status,
and a command that puts $out in the environment
and accepts strings as input.

rexec is responsible for type checking the actual connections to the command.

repeat [-o >commands] {<*}
rexec 


what about conflation of flag and variable names?

	{
		rot13 foo			# -out flag attaches to $out
		echo $=out
		echo $=out
	}

	{
		walk .			# -out flag attaches to $out
		select $=out
	}


	a | b | c
	==
	{
		{
			a
			b -in $=out		# variables defined locally by a command
							# aren't in scope
		}
		c -in $=out
	}

if we say

	a $=foo | b | c
	arble $>foo

then does the argument to arble refer to the same
argument as a? in which case the translation to
the alternative above is not strictly sugar



delimited scope of network changes?

	nodes in the network don't know when another
	node may be added (for one-to-many values)

	does that make it harder to do some kinds of optimisation?

	for instance, some kinds of terminal nodes might
	require more information from source nodes;
	by adding a new terminal node like this, you affect
	the kind of thing that the source nodes produce.
