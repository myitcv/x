# Test for the use of -tags.

! go test ./...

# No tags should not trigger generator
gg -p 1 -trace ./...
cmpenv stderr trace1

# apples tag should trigger generator
gg -p 1 -trace -tags apples ./...
cmpenv stderr trace2$GO111
go test ./...

rmglob p1/gen_*

# Adding an irrelevant tag should trigger gg again
gg -p 1 -trace -tags 'apples bananas' ./...
cmpenv stderr trace3
go test ./...

rmglob p1/gen_*

# Going back to just apples we should then use the
# cache
gg -p 1 -trace -tags apples ./...
cmpenv stderr trace4
go test ./...


-- go.mod --
module mod.com

require example.com v1.0.0

-- p1/p1.go --
package p1

const FullName = Name

-- p1/p1apples.go --
// +build apples

package p1

//go:generate gobin -m -run example.com/copy1 input

-- p1/input --
package p1

const Name = "name"

-- trace1 --
go list -deps -test -json ./...
hash {Pkg: mod.com/p1 [G]}
-- trace2 --
go list -deps -test -json -tags=apples ./...
go list -deps -json -tags=apples example.com/copy1
go: downloading example.com v1.0.0
go: extracting example.com v1.0.0
hash {Pkg: example.com/copyimpl}
hash {Pkg: example.com/copy1}
hash gobinModDep gobinModDep: example.com/copy1 (example.com/copy1)
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run example.com/copy1 input
ran generator: gobin -m -run example.com/copy1 input
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run example.com/copy1 input
ran generator: gobin -m -run example.com/copy1 input
hash {Pkg: mod.com/p1 [G]}
-- trace2go1.11 --
go list -deps -test -json -tags=apples ./...
go list -deps -json -tags=apples example.com/copy1
go: downloading example.com v1.0.0
hash {Pkg: example.com/copyimpl}
hash {Pkg: example.com/copy1}
hash gobinModDep gobinModDep: example.com/copy1 (example.com/copy1)
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run example.com/copy1 input
ran generator: gobin -m -run example.com/copy1 input
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run example.com/copy1 input
ran generator: gobin -m -run example.com/copy1 input
hash {Pkg: mod.com/p1 [G]}
-- trace3 --
go list -deps -test -json -tags=apples bananas ./...
go list -deps -json -tags=apples bananas example.com/copy1
hash {Pkg: example.com/copyimpl}
hash {Pkg: example.com/copy1}
hash gobinModDep gobinModDep: example.com/copy1 (example.com/copy1)
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run example.com/copy1 input
ran generator: gobin -m -run example.com/copy1 input
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run example.com/copy1 input
ran generator: gobin -m -run example.com/copy1 input
hash {Pkg: mod.com/p1 [G]}
-- trace4 --
go list -deps -test -json -tags=apples ./...
go list -deps -json -tags=apples example.com/copy1
hash {Pkg: example.com/copyimpl}
hash {Pkg: example.com/copy1}
hash gobinModDep gobinModDep: example.com/copy1 (example.com/copy1)
hash {Pkg: mod.com/p1 [G]}
