# Test where code is generated into directories other the directive directory.

mkdir $WORK/p/godir
mkdir $WORK/p/nongodir
gg -p 1 -trace ./...
cmpenv stderr trace1$GO111
cmp $WORK/p/godir/gen_gosample_copy1.go p/gosample
cmp $WORK/p/nongodir/gen_sample_copy1.txt p/sample

rmglob $WORK/p/godir/gen_* $WORK/p/nongodir/gen_*

gg -p 1 -trace ./...
cmpenv stderr trace2
cmp $WORK/p/godir/gen_gosample_copy1.go p/gosample
cmp $WORK/p/nongodir/gen_sample_copy1.txt p/sample

-- go.mod --
module mod.com

require example.com v1.0.0

-- tools.go --
// +build tools

package tools

require _ "example.com/copy1"

-- p/main.go --
package main

//go:generate gobin -m -run example.com/copy1 -outdir:output $WORK/p/godir gosample
//go:generate gobin -m -run example.com/copy1 -outdir:output $WORK/p/nongodir -ext .txt sample

import "fmt"

func main() {
     fmt.Println("Hello World")
}
-- p/sample --
Hello World

-- p/gosample --
package main

const Val = "Hello World"
-- trace1 --
go list -deps -test -json ./...
go: finding example.com v1.0.0
go list -deps -json example.com/copy1
go: downloading example.com v1.0.0
go: extracting example.com v1.0.0
hash {Pkg: example.com/copyimpl}
hash {Pkg: example.com/copy1}
hash gobinModDep gobinModDep: example.com/copy1 (example.com/copy1)
generate {Pkg: mod.com/p [G]}
run generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/godir gosample
ran generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/godir gosample
run generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/nongodir -ext .txt sample
ran generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/nongodir -ext .txt sample
generate {Pkg: mod.com/p [G]}
run generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/godir gosample
ran generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/godir gosample
run generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/nongodir -ext .txt sample
ran generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/nongodir -ext .txt sample
hash {Pkg: mod.com/p [G]}
-- trace1go1.11 --
go list -deps -test -json ./...
go: finding example.com v1.0.0
go list -deps -json example.com/copy1
go: downloading example.com v1.0.0
hash {Pkg: example.com/copyimpl}
hash {Pkg: example.com/copy1}
hash gobinModDep gobinModDep: example.com/copy1 (example.com/copy1)
generate {Pkg: mod.com/p [G]}
run generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/godir gosample
ran generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/godir gosample
run generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/nongodir -ext .txt sample
ran generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/nongodir -ext .txt sample
generate {Pkg: mod.com/p [G]}
run generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/godir gosample
ran generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/godir gosample
run generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/nongodir -ext .txt sample
ran generator: gobin -m -run example.com/copy1 -outdir:output $WORK/p/nongodir -ext .txt sample
hash {Pkg: mod.com/p [G]}
-- trace2 --
go list -deps -test -json ./...
go list -deps -json example.com/copy1
hash {Pkg: example.com/copyimpl}
hash {Pkg: example.com/copy1}
hash gobinModDep gobinModDep: example.com/copy1 (example.com/copy1)
hash {Pkg: mod.com/p [G]}
