# Test chaining of generators

# first run
gg -p 1 -trace ./...
cmpenv stderr trace1
go test ./...

# tidy up
rmglob p1/gen_*.go

# second run
gg -p 1 -trace ./...
cmpenv stderr trace2
go test ./...

-- go.mod --
module mod.com

require example.com v1.0.0

-- tools.go --
// +build tools

package tools

require _ "example.com/copy1"

-- p1/input1 --
package p1

//go:generate gobin -m -run example.com/copy1 input2

const Name = "simple"

-- p1/input2 --
package p1

//go:generate gobin -m -run example.com/copy1 input3

const Surname = "problem"

-- p1/input3 --
package p1

const Title = "our"

-- p1/a.go --
package p1

// This file is named a.go in order that it appears before
// any of the generated files, hence its (this file's)
// generator will always be run first.

//go:generate gobin -m -run example.com/copy1 input1

const Result = Title + Name + Surname

-- trace1 --
go list -deps -test -json ./...
go: finding example.com v1.0.0
go list -deps -json example.com/copy1
go: downloading example.com v1.0.0
hash {Pkg: example.com/copyimpl}
hash {Pkg: example.com/copy1}
hash gobinModDep gobinModDep: example.com/copy1 (example.com/copy1)
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run example.com/copy1 input1
ran generator: gobin -m -run example.com/copy1 input1
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run example.com/copy1 input1
ran generator: gobin -m -run example.com/copy1 input1
run generator: gobin -m -run example.com/copy1 input2
ran generator: gobin -m -run example.com/copy1 input2
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run example.com/copy1 input1
ran generator: gobin -m -run example.com/copy1 input1
run generator: gobin -m -run example.com/copy1 input2
ran generator: gobin -m -run example.com/copy1 input2
run generator: gobin -m -run example.com/copy1 input3
ran generator: gobin -m -run example.com/copy1 input3
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run example.com/copy1 input1
ran generator: gobin -m -run example.com/copy1 input1
run generator: gobin -m -run example.com/copy1 input2
ran generator: gobin -m -run example.com/copy1 input2
run generator: gobin -m -run example.com/copy1 input3
ran generator: gobin -m -run example.com/copy1 input3
hash {Pkg: mod.com/p1 [G]}
-- trace2 --
go list -deps -test -json ./...
go list -deps -json example.com/copy1
hash {Pkg: example.com/copyimpl}
hash {Pkg: example.com/copy1}
hash gobinModDep gobinModDep: example.com/copy1 (example.com/copy1)
hash {Pkg: mod.com/p1 [G]}
