# Test for special -infiles: flag

# first run
gg -p 1 -trace ./...
cmpenv stderr trace1
cmp p1/gen_input_txt_p2.go p1/p3/input.txt
cmp p1/gen_another_txt_p2.go p2/another.txt

cp p1/p3/input.txt.2 p1/p3/input.txt

# second run
gg -p 1 -trace ./...
cmpenv stderr trace2
cmp p1/gen_input_txt_p2.go p1/p3/input.txt.2
cmp p1/gen_another_txt_p2.go p2/another.txt

cp p2/another.txt.2 p2/another.txt

# third run
gg -p 1 -trace ./...
cmpenv stderr trace3
cmp p1/gen_input_txt_p2.go p1/p3/input.txt.2
cmp p1/gen_another_txt_p2.go p2/another.txt.2

-- go.mod --
module mod.com

-- p1/p1.go --
package p1

import _ "mod.com/p1/p3"

//go:generate gobin -m -run mod.com/p2 -infiles:test ./p3/*.txt
//go:generate gobin -m -run mod.com/p2 -infiles:test ../p2/another.txt

-- p1/p3/0input.txt --
package p1

// This file is intentionally named so that it will
// appear first in the glob. We modify the second file
// just in case (as we did have) there is an "off-by-one"
// error.

-- p1/p3/input.txt --
package p1

// this is input.txt

-- p1/p3/input.txt.2 --
package p1

// this is input.txt.2

-- p1/p3/p3.go --
package p3

-- p1/p3/dir.txt/rubbish.txt --

-- p2/p2.go --
package main

import (
	"flag"
	"io"
	"os"
	"path/filepath"
	"strings"
)

var (
	fTest = flag.String("infiles:test", "", "our test file")
)

func main() {
	flag.Parse()

	ms, err := filepath.Glob(*fTest)
	if err != nil {
		panic(err)
	}

	for _, m := range ms {
		fi, err := os.Stat(m)
		if err != nil {
			panic(err)
		}
		if fi.IsDir() {
			continue
		}
		infile, err := os.Open(m)
		if err != nil {
			panic(err)
		}
		outfile, err := os.Create("gen_" + strings.Replace(filepath.Base(m), ".", "_", -1) + "_p2.go")
		if err != nil {
			panic(err)
		}
		if _, err := io.Copy(outfile, infile); err != nil {
			panic(err)
		}
	}
}

-- p2/another.txt --
package p1

// another.txt in p2
-- p2/another.txt.2 --
package p1

// another.txt.2 in p2
-- trace1 --
go list -deps -test -json ./...
hash {Pkg: mod.com/p1/p3 [G]}
hash {Pkg: mod.com/p2 [G]}
hash gobinModDep gobinModDep: mod.com/p2 (mod.com/p2)
infiles for mod.com/p1: [$WORK/p1/p3/0input.txt $WORK/p1/p3/input.txt $WORK/p2/another.txt]
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run mod.com/p2 -infiles:test ./p3/*.txt
ran generator: gobin -m -run mod.com/p2 -infiles:test ./p3/*.txt
run generator: gobin -m -run mod.com/p2 -infiles:test ../p2/another.txt
ran generator: gobin -m -run mod.com/p2 -infiles:test ../p2/another.txt
infiles for mod.com/p1: [$WORK/p1/p3/0input.txt $WORK/p1/p3/input.txt $WORK/p2/another.txt]
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run mod.com/p2 -infiles:test ./p3/*.txt
ran generator: gobin -m -run mod.com/p2 -infiles:test ./p3/*.txt
run generator: gobin -m -run mod.com/p2 -infiles:test ../p2/another.txt
ran generator: gobin -m -run mod.com/p2 -infiles:test ../p2/another.txt
hash {Pkg: mod.com/p1 [G]}
-- trace2 --
go list -deps -test -json ./...
hash {Pkg: mod.com/p1/p3 [G]}
hash {Pkg: mod.com/p2 [G]}
hash gobinModDep gobinModDep: mod.com/p2 (mod.com/p2)
infiles for mod.com/p1: [$WORK/p1/p3/0input.txt $WORK/p1/p3/input.txt $WORK/p2/another.txt]
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run mod.com/p2 -infiles:test ./p3/*.txt
ran generator: gobin -m -run mod.com/p2 -infiles:test ./p3/*.txt
run generator: gobin -m -run mod.com/p2 -infiles:test ../p2/another.txt
ran generator: gobin -m -run mod.com/p2 -infiles:test ../p2/another.txt
infiles for mod.com/p1: [$WORK/p1/p3/0input.txt $WORK/p1/p3/input.txt $WORK/p2/another.txt]
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run mod.com/p2 -infiles:test ./p3/*.txt
ran generator: gobin -m -run mod.com/p2 -infiles:test ./p3/*.txt
run generator: gobin -m -run mod.com/p2 -infiles:test ../p2/another.txt
ran generator: gobin -m -run mod.com/p2 -infiles:test ../p2/another.txt
hash {Pkg: mod.com/p1 [G]}
-- trace3 --
go list -deps -test -json ./...
hash {Pkg: mod.com/p1/p3 [G]}
hash {Pkg: mod.com/p2 [G]}
hash gobinModDep gobinModDep: mod.com/p2 (mod.com/p2)
infiles for mod.com/p1: [$WORK/p1/p3/0input.txt $WORK/p1/p3/input.txt $WORK/p2/another.txt]
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run mod.com/p2 -infiles:test ./p3/*.txt
ran generator: gobin -m -run mod.com/p2 -infiles:test ./p3/*.txt
run generator: gobin -m -run mod.com/p2 -infiles:test ../p2/another.txt
ran generator: gobin -m -run mod.com/p2 -infiles:test ../p2/another.txt
infiles for mod.com/p1: [$WORK/p1/p3/0input.txt $WORK/p1/p3/input.txt $WORK/p2/another.txt]
generate {Pkg: mod.com/p1 [G]}
run generator: gobin -m -run mod.com/p2 -infiles:test ./p3/*.txt
ran generator: gobin -m -run mod.com/p2 -infiles:test ./p3/*.txt
run generator: gobin -m -run mod.com/p2 -infiles:test ../p2/another.txt
ran generator: gobin -m -run mod.com/p2 -infiles:test ../p2/another.txt
hash {Pkg: mod.com/p1 [G]}
