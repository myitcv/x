package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
)

const (
	genName = "genmain"
	ofn     = "gen_go_" + genName + ".go"
)

func main() {
	var stderr bytes.Buffer
	cmd := exec.Command("go", "list", "-f={{.Dir}}", "myitcv.io/cmd/gg/internal/go")
	cmd.Stderr = &stderr

	out, err := cmd.Output()
	if err != nil {
		fatalf("failed to run %v: %v\n%s", strings.Join(cmd.Args, " "), err, stderr.Bytes())
	}

	dir := strings.TrimSpace(string(out))

	fn := filepath.Join(dir, "main.go")
	fc, err := ioutil.ReadFile(fn)
	if err != nil {
		fatalf("failed to read file %v: %v\n", fn, err)
	}

	o := fmt.Sprintf(`
// Code generated by %v. DO NOT EDIT.

package main

const goMain = %q
`[1:], genName, strconv.Quote(string(fc)))
	if err := ioutil.WriteFile(ofn, []byte(o), 0666); err != nil {
		fatalf("failed to write to %v: %v\n", fn, err)
	}
}

func fatalf(format string, args ...interface{}) {
	fmt.Fprintf(os.Stderr, format, args...)
	os.Exit(1)
}
