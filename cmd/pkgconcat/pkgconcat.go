// pkgconcat is a simple tool that concatenates the contents of a package into a single file
package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/build"
	"go/format"
	"go/parser"
	"go/printer"
	"go/token"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"sort"
	"strings"
)

var (
	fOutPkg  = flag.String("outpkgname", "", "name of package to output; if not specified take the package name of the input directory/import path")
	fOutFile = flag.String("out", "", "path to which to write output; if not specified STDOUT is used")
)

// takes an optional single directory/import path. A directory is identified by
// being absolute otherwise the argument is assumed to be an import path (even
// with ../ etc). No args => $PWD
func main() {
	setupAndParseFlags(`Usage:

  pkgconcat [directory/import path]

pkgconcat takes an optional single argument that is a directory or an import
path. A directory is indicated by being an absolute path; anything else is
treated as an import path.
`)

	// if we have an import path convert it to a directory

	outBuf := new(bytes.Buffer)
	outln := func(format string, args ...interface{}) {
		fmt.Fprintf(outBuf, format+"\n", args...)
	}

	var err error
	args := flag.Args()

	cwd, err := os.Getwd()
	if err != nil {
		fatalf("failed to get cwd: %v", err)
	}

	var dirOrPath string

	switch len(args) {
	case 0:
		dirOrPath = cwd
	case 1:
		dirOrPath = args[0]
	default:
		fatalf("expected at most 1 directory/import path argument")
	}

	var bpkg *build.Package

	if !filepath.IsAbs(dirOrPath) {
		bpkg, err = build.Import(dirOrPath, cwd, 0)
		if err != nil {
			fatalf("failed to resolve import %v: %v", dirOrPath, err)
		}

		dirOrPath = bpkg.Dir
	} else {
		bpkg, err = build.ImportDir(dirOrPath, 0)
		if err != nil {
			fatalf("failed to import from directory %v: %v", dirOrPath, err)
		}
	}

	nonTest := func(fi os.FileInfo) bool {
		for _, f := range bpkg.GoFiles {
			if f == fi.Name() {
				return true
			}
		}

		return false
	}

	outPkgName := bpkg.Name

	if *fOutPkg != "" {
		outPkgName = *fOutPkg
	}

	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, bpkg.Dir, nonTest, parser.ParseComments)
	if err != nil {
		fatalf("failed to parse dir %v: %v", bpkg.Dir, err)
	}

	pkg, ok := pkgs[bpkg.Name]
	if !ok {
		fatalf("failed to parse package named %v in dir %v", bpkg.Name, bpkg.Dir)
	}

	var files []*ast.File
	for _, f := range pkg.Files {
		files = append(files, f)
	}

	sort.Slice(files, func(i, j int) bool {
		return strings.Compare(files[i].Name.Name, files[j].Name.Name) < 0
	})

	// TODO handle clashes in imports with other names in scopes
	// for now if the aren't renamed we can assume we are safe...
	// worst case the output will fail to compile and we'll have to
	// revisit this

	// code generation header
	outln("// Code generated by pkgconcat. DO NOT EDIT.")
	outln("")

	// package name
	outln("package %v", outPkgName)

	// imports
	outln("import (")
	seenImports := make(map[string]string)
	for _, f := range files {
		for _, i := range f.Imports {
			p := strings.Trim(i.Path.Value, "\"")
			var in string
			if i.Name != nil {
				in = i.Name.Name
			} else {
				in = path.Base(p)
			}
			if n, ok := seenImports[p]; ok {

				if n != in {
					fatalf("not supported yet; different files import the %v under different names %v and %v", p, n, in)
				}

				// we are fine; fall through
			} else {
				seenImports[p] = in

				if in == path.Base(p) {
					outln("\t\"%v\"", p)
				} else {
					outln("\t%v \"%v\"", in, p)
				}

			}
		}
	}
	outln(")")
	// end imports

	// now we simply dump the rest of the declarations
	for _, f := range files {
		for _, d := range f.Decls {
			if gd, ok := d.(*ast.GenDecl); ok {
				if gd.Tok == token.IMPORT {
					continue
				}
			}

			printer.Fprint(outBuf, fset, d)
			outln("")
		}
	}

	fmtByts, err := format.Source(outBuf.Bytes())
	if err != nil {
		fatalf("failed to format output: %v\n%v", err, outBuf.String())
	}

	if *fOutFile != "" {
		if err := ioutil.WriteFile(*fOutFile, fmtByts, 0644); err != nil {
			fatalf("failed to write to %v: %v", *fOutFile, err)
		}
	} else {
		if _, err := os.Stdout.Write(fmtByts); err != nil {
			fatalf("failed to write output to stdout: %v", err)
		}
	}
}
