// Code generated by reactGen. DO NOT EDIT.

package main

import "myitcv.io/react"

type PersonViewerElem struct {
	react.Element
}

func buildPersonViewer(cd react.ComponentDef) react.Component {
	return PersonViewerDef{ComponentDef: cd}
}

func buildPersonViewerElem(children ...react.Element) *PersonViewerElem {
	return &PersonViewerElem{
		Element: react.CreateElement(buildPersonViewer, nil, children...),
	}
}

func (p PersonViewerDef) RendersElement() react.Element {
	return p.Render()
}

// SetState is an auto-generated proxy proxy to update the state for the
// PersonViewer component.  SetState does not immediately mutate p.State()
// but creates a pending state transition.
func (p PersonViewerDef) SetState(state PersonViewerState) {
	p.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the PersonViewer component
func (p PersonViewerDef) State() PersonViewerState {
	return p.ComponentDef.State().(PersonViewerState)
}

// IsState is an auto-generated definition so that PersonViewerState implements
// the myitcv.io/react.State interface.
func (p PersonViewerState) IsState() {}

var _ react.State = PersonViewerState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (p PersonViewerDef) GetInitialStateIntf() react.State {
	return PersonViewerState{}
}

func (p PersonViewerState) EqualsIntf(val react.State) bool {
	return p == val.(PersonViewerState)
}
