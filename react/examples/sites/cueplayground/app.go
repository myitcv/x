// Template generated by reactGen

package main

import (
	"encoding/json"
	"fmt"
	"strings"

	"cuelang.org/go/cue"
	"cuelang.org/go/cue/errors"
	"github.com/gopherjs/gopherjs/js"
	"honnef.co/go/js/dom"

	"myitcv.io/react"
)

type AppDef struct {
	react.ComponentDef
}

//go:generate gobin -m -run myitcv.io/immutable/cmd/immutableGen

type lang string

const (
	langCue lang = "Cue"
)

type _Imm_langState struct {
	Code  string
	Ast   string
	Error bool
}

type AppState struct {
	Cue *langState
}

type hashListener struct {
	o *js.Object

	a           AppDef
	handleEvent func() `js:"handleEvent"`
}

func App() *AppElem {
	return buildAppElem()
}

func (a AppDef) GetInitialState() AppState {
	return AppState{
		Cue: new(langState),
	}
}

func (a AppDef) Render() react.Element {
	s := a.State()
	curr := s.Cue

	outputClass := "ast"
	if curr.Error() {
		outputClass += " asterror"
	}

	return react.Div(
		&react.DivProps{ClassName: "grid-container"},
		react.Div(
			&react.DivProps{ClassName: "header"},
			react.S("Cue Playground"),
		),
		react.Div(
			&react.DivProps{ClassName: "left"},
			react.TextArea(
				&react.TextAreaProps{
					ClassName:   "codeinput",
					Placeholder: fmt.Sprintf("Your Cue code here..."),
					Value:       curr.Code(),
					OnChange:    inputChange(a),
				},
			),
		),
		react.Div(
			&react.DivProps{ClassName: "right"},
			react.Pre(
				&react.PreProps{ClassName: outputClass},
				react.S(curr.Ast()),
			),
		),
	)
}

type changeEvent struct {
	a AppDef
}

func inputChange(a AppDef) inputChangeEvent {
	return inputChangeEvent{
		changeEvent: changeEvent{a: a},
	}
}

type inputChangeEvent struct {
	changeEvent
}

func (i inputChangeEvent) OnChange(se *react.SyntheticEvent) {
	target := se.Target().(*dom.HTMLTextAreaElement)

	st := i.a.State()
	st.Cue = st.Cue.SetCode(target.Value)
	i.a.SetState(st)

	i.a.handleEvent()
}

func (a AppDef) handleEvent() {
	st := a.State().Cue.AsMutable()
	defer func() {
		st.AsImmutable(nil)
		cst := a.State()
		cst.Cue = st
		a.SetState(cst)
	}()

	st.SetError(true)
	st.SetAst("")

	if st.Code() == "" {
		return
	}

	var r cue.Runtime

	instance, err := r.Compile("input", st.Code())
	if err != nil {
		var b strings.Builder
		errors.Print(&b, err, nil)
		st.SetAst(b.String())
		return
	}
	out, err := json.MarshalIndent(instance.Value(), "", "  ")
	if err != nil {
		st.SetAst(err.Error())
		return
	}
	st.SetAst(string(out))
	st.SetError(false)
}
