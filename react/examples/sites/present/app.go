// Template generated by reactGen

package main

import (
	"bytes"
	"net/url"
	"strconv"
	"strings"

	"honnef.co/go/js/dom"
	"honnef.co/go/js/xhr"
	"myitcv.io/react"
)

const (
	queryParamHideAddressBar = "hideAddressBar"
	queryParamURL            = "url"
)

type AppDef struct {
	react.ComponentDef
}

type AppState struct {
	URL            string
	Slides         string
	Error          string
	Status         string
	HideAddressBar bool
}

func App() *AppElem {
	return buildAppElem()
}

func (a AppDef) GetInitialState() AppState {
	loc := dom.GetWindow().Location()
	u, err := url.Parse(loc.String())
	if err != nil {
		panic(err)
	}

	res := AppState{}

	res.URL = u.Query().Get(queryParamURL)

	if b, err := strconv.ParseBool(u.Query().Get(queryParamHideAddressBar)); err == nil && b {
		res.HideAddressBar = true
	}

	return res
}

func (a AppDef) ComponentWillMount() {
	go func() {
		if err := initTemplates("."); err != nil {
			panic(err)
		}

		if u := a.State().URL; u != "" {
			a.newUrl(u)
		}
	}()
}

func (a AppDef) Render() react.Element {
	s := a.State()

	var contents []react.Element

	if s.Slides != "" {
		contents = append(contents, react.IFrame(&react.IFrameProps{
			SrcDoc: s.Slides,
			Style: &react.CSS{
				Width:  "100%",
				Height: "100%",
			},
		}))
	} else {
		if s.Error != "" {
			contents = append(contents,
				react.Div(&react.DivProps{ClassName: "placeholder error"}, react.S(s.Error)),
			)
		} else if s.Status != "" {
			contents = append(contents,
				react.Div(&react.DivProps{ClassName: "placeholder status"}, react.S(s.Status)),
			)
		} else {
			contents = append(contents,
				react.Div(&react.DivProps{ClassName: "placeholder arrow"}, react.S("\u21E7")),
				react.Div(&react.DivProps{ClassName: "placeholder text"}, react.S("Enter slides URL")),
			)
		}
	}

	var addressBar react.Element

	if !s.HideAddressBar {
		addressBar = react.Input(&react.InputProps{
			Placeholder: "Slides URL",
			ID:          "addressbar",
			OnChange:    urlChange{a},
			Value:       s.URL,
		})
	}

	return react.Div(
		&react.DivProps{ClassName: "box"},
		react.Div(&react.DivProps{ClassName: "row header"},
			addressBar,
		),
		react.Div(&react.DivProps{ClassName: "row content"},
			contents...,
		),
	)
}

func (a AppDef) newUrl(u string) {
	st := a.State()
	st.URL = u
	st.Status = "Loading..."
	a.SetState(st)

	if u == "" {
		return
	}

	go func() {
		req := xhr.NewRequest("GET", u)

		err := req.Send(nil)

		st := a.State()

		if err != nil {
			st.Error = "Invalid URL"
			a.SetState(st)
			return
		}

		st.Status = "Loading..."
		a.SetState(st)

		out := new(bytes.Buffer)
		in := strings.NewReader(req.ResponseText)

		err = renderDoc(out, u, in)
		if err != nil {
			panic(err)
		}

		st = a.State()
		st.Slides = out.String()
		a.SetState(st)
	}()
}

type urlChange struct{ AppDef }

func (uc urlChange) OnChange(se *react.SyntheticEvent) {
	target := se.Target().(*dom.HTMLInputElement)
	u := target.Value

	uc.newUrl(u)
}
