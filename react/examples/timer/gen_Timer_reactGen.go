// Code generated by reactGen. DO NOT EDIT.

package timer

import "myitcv.io/react"

type TimerElem struct {
	react.Element
}

func buildTimer(cd react.ComponentDef) react.Component {
	return TimerDef{ComponentDef: cd}
}

func buildTimerElem(children ...react.Element) *TimerElem {
	return &TimerElem{
		Element: react.CreateElement(buildTimer, nil, children...),
	}
}

func (t TimerDef) RendersElement() react.Element {
	return t.Render()
}

// SetState is an auto-generated proxy proxy to update the state for the
// Timer component.  SetState does not immediately mutate t.State()
// but creates a pending state transition.
func (t TimerDef) SetState(state TimerState) {
	t.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the Timer component
func (t TimerDef) State() TimerState {
	return t.ComponentDef.State().(TimerState)
}

// IsState is an auto-generated definition so that TimerState implements
// the myitcv.io/react.State interface.
func (t TimerState) IsState() {}

var _ react.State = TimerState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (t TimerDef) GetInitialStateIntf() react.State {
	return TimerState{}
}

func (t TimerState) EqualsIntf(val react.State) bool {
	return t == val.(TimerState)
}
