// +build js

// Code generated by myitcv.io/react/cmd/coreGen. DO NOT EDIT.

package react_test

import (
	"testing"

	"honnef.co/go/js/dom"

	"myitcv.io/react"
	"myitcv.io/react/testutils"
)

func TestAElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.A(&react.AProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLAnchorElement); !ok {
		t.Fatal("Failed to find <a> element")
	}
}
func TestAbbrElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Abbr(&react.AbbrProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.BasicHTMLElement); !ok {
		t.Fatal("Failed to find <abbr> element")
	}
}
func TestArticleElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Article(&react.ArticleProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.BasicHTMLElement); !ok {
		t.Fatal("Failed to find <article> element")
	}
}
func TestAsideElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Aside(&react.AsideProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.BasicHTMLElement); !ok {
		t.Fatal("Failed to find <aside> element")
	}
}
func TestBElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.B(&react.BProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.BasicHTMLElement); !ok {
		t.Fatal("Failed to find <b> element")
	}
}
func TestBrElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Br(&react.BrProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLBRElement); !ok {
		t.Fatal("Failed to find <br> element")
	}
}
func TestButtonElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Button(&react.ButtonProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLButtonElement); !ok {
		t.Fatal("Failed to find <button> element")
	}
}
func TestCodeElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Code(&react.CodeProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.BasicHTMLElement); !ok {
		t.Fatal("Failed to find <code> element")
	}
}
func TestDivElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Div(&react.DivProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLDivElement); !ok {
		t.Fatal("Failed to find <div> element")
	}
}
func TestEmElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Em(&react.EmProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.BasicHTMLElement); !ok {
		t.Fatal("Failed to find <em> element")
	}
}
func TestFooterElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Footer(&react.FooterProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.BasicHTMLElement); !ok {
		t.Fatal("Failed to find <footer> element")
	}
}
func TestFormElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Form(&react.FormProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLFormElement); !ok {
		t.Fatal("Failed to find <form> element")
	}
}
func TestH1Elem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.H1(&react.H1Props{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLHeadingElement); !ok {
		t.Fatal("Failed to find <h1> element")
	}
}
func TestH2Elem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.H2(&react.H2Props{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLHeadingElement); !ok {
		t.Fatal("Failed to find <h2> element")
	}
}
func TestH3Elem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.H3(&react.H3Props{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLHeadingElement); !ok {
		t.Fatal("Failed to find <h3> element")
	}
}
func TestH4Elem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.H4(&react.H4Props{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLHeadingElement); !ok {
		t.Fatal("Failed to find <h4> element")
	}
}
func TestH5Elem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.H5(&react.H5Props{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLHeadingElement); !ok {
		t.Fatal("Failed to find <h5> element")
	}
}
func TestH6Elem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.H6(&react.H6Props{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLHeadingElement); !ok {
		t.Fatal("Failed to find <h6> element")
	}
}
func TestHeaderElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Header(&react.HeaderProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.BasicHTMLElement); !ok {
		t.Fatal("Failed to find <header> element")
	}
}
func TestHrElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Hr(&react.HrProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLHRElement); !ok {
		t.Fatal("Failed to find <hr> element")
	}
}
func TestIElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.I(&react.IProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.BasicHTMLElement); !ok {
		t.Fatal("Failed to find <i> element")
	}
}
func TestIFrameElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.IFrame(&react.IFrameProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLIFrameElement); !ok {
		t.Fatal("Failed to find <iframe> element")
	}
}
func TestImgElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Img(&react.ImgProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLImageElement); !ok {
		t.Fatal("Failed to find <img> element")
	}
}
func TestInputElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Input(&react.InputProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLInputElement); !ok {
		t.Fatal("Failed to find <input> element")
	}
}
func TestLabelElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Label(&react.LabelProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLLabelElement); !ok {
		t.Fatal("Failed to find <label> element")
	}
}
func TestLiElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Li(&react.LiProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLLIElement); !ok {
		t.Fatal("Failed to find <li> element")
	}
}
func TestMainElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Main(&react.MainProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.BasicHTMLElement); !ok {
		t.Fatal("Failed to find <main> element")
	}
}
func TestNavElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Nav(&react.NavProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.BasicHTMLElement); !ok {
		t.Fatal("Failed to find <nav> element")
	}
}
func TestOptionElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Option(&react.OptionProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLOptionElement); !ok {
		t.Fatal("Failed to find <option> element")
	}
}
func TestPElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.P(&react.PProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLParagraphElement); !ok {
		t.Fatal("Failed to find <p> element")
	}
}
func TestPreElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Pre(&react.PreProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLPreElement); !ok {
		t.Fatal("Failed to find <pre> element")
	}
}
func TestSelectElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Select(&react.SelectProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLSelectElement); !ok {
		t.Fatal("Failed to find <select> element")
	}
}
func TestSpanElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Span(&react.SpanProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLSpanElement); !ok {
		t.Fatal("Failed to find <span> element")
	}
}
func TestStrikeElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Strike(&react.StrikeProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.BasicHTMLElement); !ok {
		t.Fatal("Failed to find <s> element")
	}
}
func TestSupElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Sup(&react.SupProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.BasicHTMLElement); !ok {
		t.Fatal("Failed to find <sup> element")
	}
}
func TestTableElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Table(&react.TableProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLTableElement); !ok {
		t.Fatal("Failed to find <table> element")
	}
}
func TestTextAreaElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.TextArea(&react.TextAreaProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLTextAreaElement); !ok {
		t.Fatal("Failed to find <textarea> element")
	}
}
func TestUlElem(t *testing.T) {
	class := "test"

	x := testutils.Wrapper(react.Ul(&react.UlProps{ClassName: class}))
	cont := testutils.RenderIntoDocument(x)

	el := testutils.FindRenderedDOMComponentWithClass(cont, class)

	if _, ok := el.(*dom.HTMLUListElement); !ok {
		t.Fatal("Failed to find <ul> element")
	}
}
