// Code generated by reactGen. DO NOT EDIT.

package imm

import "myitcv.io/react"

type SelectElem struct {
	react.Element
}

func buildSelect(cd react.ComponentDef) react.Component {
	return SelectDef{ComponentDef: cd}
}

func buildSelectElem(props SelectProps, children ...react.Element) *SelectElem {
	return &SelectElem{
		Element: react.CreateElement(buildSelect, props, children...),
	}
}

func (s SelectDef) RendersElement() react.Element {
	return s.Render()
}

// SetState is an auto-generated proxy proxy to update the state for the
// Select component.  SetState does not immediately mutate s.State()
// but creates a pending state transition.
func (s SelectDef) SetState(state SelectState) {
	s.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the Select component
func (s SelectDef) State() SelectState {
	return s.ComponentDef.State().(SelectState)
}

// IsState is an auto-generated definition so that SelectState implements
// the myitcv.io/react.State interface.
func (s SelectState) IsState() {}

var _ react.State = SelectState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (s SelectDef) GetInitialStateIntf() react.State {
	return SelectState{}
}

func (s SelectState) EqualsIntf(val react.State) bool {
	return s == val.(SelectState)
}

// IsProps is an auto-generated definition so that SelectProps implements
// the myitcv.io/react.Props interface.
func (s SelectProps) IsProps() {}

// Props is an auto-generated proxy to the current props of Select
func (s SelectDef) Props() SelectProps {
	uprops := s.ComponentDef.Props()
	return uprops.(SelectProps)
}

// ComponentWillReceivePropsIntf is an auto-generated proxy to
// ComponentWillReceiveProps
func (s SelectDef) ComponentWillReceivePropsIntf(val interface{}) {
	ourProps := val.(SelectProps)
	s.ComponentWillReceiveProps(ourProps)
}

func (s SelectProps) EqualsIntf(val react.Props) bool {
	return s == val.(SelectProps)
}

var _ react.Props = SelectProps{}
